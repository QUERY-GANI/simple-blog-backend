# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Author model"""
type Author {
  createdAt: DateTime!
  email: String!
  id: Float!
  password: String!
  posts: [Post!]!
  role: roles!
  updatedAt: DateTime!
  username: String!
}

input CreateAuthorInput {
  email: String!
  password: String!
  username: String!
}

input CreatePostInput {
  content: String!
  draft: Boolean
  slug: String!
  tags: [Int!]!
  title: String!
}

input CreateTagInput {
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteAuthorInput {
  id: Int!
}

input DeletePostInput {
  id: Int!
}

input DeleteTagInput {
  id: Int!
}

input GetAuthorInput {
  id: Int!
}

input GetByTagInput {
  name: String!
}

input GetPostByIdInput {
  id: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginType {
  expiresIn: String!
  token: String!
}

type Mutation {
  CreateAuthor(payload: CreateAuthorInput!): Author!
  CreatePost(payload: CreatePostInput!): Post!
  CreateTag(payload: CreateTagInput!): Tag!
  DeleteAuthor(payload: DeleteAuthorInput!): ResponseType!
  DeletePost(payload: DeletePostInput!): ResponseType!
  DeleteTag(payload: DeleteTagInput!): ResponseType!
  UpdateAuthor(payload: UpdateAuthorInput!): Author!
  UpdatePost(payload: UpdatePostInput!): Post!
  UpdateTag(payload: UpdateTagInput!): Tag!
  login(payload: LoginInput!): LoginType!
}

"""Post model"""
type Post {
  author: Author!
  content: String!
  createdAt: DateTime!
  likes: Int!
  slug: String!
  tags: [Tag!]!
  title: String!
  updatedAt: DateTime!
}

type Query {
  GetAuthorById(payload: GetAuthorInput!): Author!
  GetPost(payload: GetPostByIdInput!): Post!
  ShowAllAuthor: [Author!]!
  ShowAllPost: [Post!]!
  ShowAllTag: [Tag!]!
  ShowByTag(payload: GetByTagInput!): Tag!
}

"""Return Response Type"""
type ResponseType {
  success: Boolean!
}

"""Tag model"""
type Tag {
  id: Int!
  name: String!
  posts: [Post!]!
}

input UpdateAuthorInput {
  id: Int!
  password: String!
  username: String!
}

input UpdatePostInput {
  content: String!
  draft: Boolean
  id: Int!
  slug: String!
  tags: [Int!]!
  title: String!
}

input UpdateTagInput {
  id: Int!
  name: String!
}

enum roles {
  admin
  member
}